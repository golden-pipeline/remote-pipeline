name: Golden Pipeline - CI/CD

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_TOKEN:
        required: true

jobs:
  checkout-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Salvar arquivos como artefato
        uses: actions/upload-artifact@v4
        with:
          name: flask-app-files
          path: ./

      - name: Instalar Dependências
        run: echo "Instalando dependências..."

      - name: Executar Testes
        run: echo "Rodando testes automatizados..."

  build-and-push-image:
    needs: checkout-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Baixar artefatos
        uses: actions/download-artifact@v4
        with:
          name: flask-app-files

      - name: Ler versão do package.json
        id: get_version
        run: |
          VERSION=$(jq -r .version package.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Versão extraída: $VERSION"
  
      - name: Obter SHA do commit
        id: get_sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Login no Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Verificar se o repositório já existe no Docker Hub
        id: check_repo
        run: |
          REPO_NAME=${{ secrets.DOCKER_USERNAME }}/flask-app
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/flask-app/")
          if [ "$STATUS" == "404" ]; then
            echo "Repositório não encontrado. Criando..."
            curl -X POST -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.DOCKER_TOKEN }}" \
              -d '{"name": "flask-app", "is_private": false}' \
              https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/
          else
            echo "Repositório já existe."
          fi

      - name: Construir e taguear a imagem
        env:
          IMAGE_TAG: "${{ env.VERSION }}-${{ env.SHORT_SHA }}"
        run: |
          IMAGE_TAG="${{ env.VERSION }}-${{ env.SHORT_SHA }}"
          docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-app:$IMAGE_TAG .
          docker tag ${{ secrets.DOCKER_USERNAME }}/flask-app:$IMAGE_TAG ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
  
      - name: Enviar imagem para o repositório
        run: |
          IMAGE_TAG="${{ env.VERSION }}-${{ env.SHORT_SHA }}"
          docker push ${{ secrets.DOCKER_USERNAME }}/flask-app:$IMAGE_TAG .
          docker push ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
