name: Golden Pipeline - CI/CD

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_TOKEN:
        required: true
      GH_ACCESS_TOKEN:
        required: true

jobs:
  checkout-and-test:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.get_version.outputs.IMAGE_TAG }}  # Exporta a tag da imagem
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Salvar arquivos como artefato
        uses: actions/upload-artifact@v4
        with:
          name: artifact-files
          path: ./
      - name: Obter e Criar tag da imagem docker
        id: get_version
        run: |
          VERSION=$(jq -r .version src/package.json)
          SHORT_SHA=$(git rev-parse --short HEAD)
          IMAGE_TAG="$VERSION-$SHORT_SHA"
  
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
  
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
  
          echo "Versão extraída: $VERSION"
          echo "SHA do commit: $SHORT_SHA"
          echo "Tag da imagem gerada: $IMAGE_TAG"

  build-and-push-image:
    needs: checkout-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Login no Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Verificar se o repositório já existe no Docker Hub
        id: check_repo
        run: |
          REPO_NAME=${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://hub.docker.com/v2/repositories/$REPO_NAME/")
          if [ "$STATUS" == "404" ]; then
            echo "Repositório não encontrado. Criando..."
            curl -X POST -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.DOCKER_TOKEN }}" \
              -d "{\"name\": \"${{ github.event.repository.name }}\", \"is_private\": false}" \
              https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/
          else
            echo "Repositório já existe."
          fi

      - name: Recuperar tag da imagem
        run: echo "IMAGE_TAG=${{ needs.checkout-and-test.outputs.image_tag }}" >> $GITHUB_ENV

      - name: Construir e taguear a imagem
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:$IMAGE_TAG ./src
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:$IMAGE_TAG ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest

      - name: Enviar imagem para o repositório
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:$IMAGE_TAG
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest
        

  deploy-argocd:
    needs: 
      - checkout-and-test
      - build-and-push-image
    runs-on: ubuntu-latest
    steps:
      - name: Clonar repositório dos manifestos do Kubernetes
        uses: actions/checkout@v4
        with:
          repository: golden-pipeline/fake-shop
          ref: feature-ecommerce
          token: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Recuperar tag da imagem
        run: echo "IMAGE_TAG=${{ needs.checkout-and-test.outputs.image_tag }}" >> $GITHUB_ENV

      - name: Atualizar imagem
        run: |
          echo "Tag da imagem: $IMAGE_TAG"
          sed -i "s|image: .*|image: ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:$IMAGE_TAG|" k8s/ecommerce/deployment.yaml

      - name: Commit e push das alterações
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add k8s/ecommerce/deployment.yaml
          git commit -m "Atualizando imagens da aplicação:$$IMAGE_TAG"
          git push origin main